// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/shared/prismagraphql"
  reExport = Directories
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Neon requires connection pooling for better performance
  directUrl = env("DATABASE_URL")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdTasks  Task[]        @relation("TaskCreator")
  assignedTasks Task[]        @relation("TaskAssignee")
  comments      TaskComment[]
  projects      ProjectMember[]

  @@index([createdAt])
  @@map("users")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tasks   Task[]
  members ProjectMember[]

  @@index([createdAt])
  @@index([name])
  @@map("projects")
}

model ProjectMember {
  id        String @id @default(uuid())
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Foreign keys
  createdBy  String
  assignedTo String?
  projectId  String

  // Relations
  creator   User          @relation("TaskCreator", fields: [createdBy], references: [id])
  assignee  User?         @relation("TaskAssignee", fields: [assignedTo], references: [id])
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  comments  TaskComment[]

  // Performance indexes
  @@index([projectId])
  @@index([createdBy])
  @@index([assignedTo])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([createdAt])
  @@index([updatedAt])
  
  // Composite indexes for common query patterns
  @@index([projectId, status])
  @@index([projectId, assignedTo])
  @@index([projectId, createdAt(sort: Desc)])
  @@index([status, createdAt(sort: Desc)])
  @@index([assignedTo, status])
  @@index([priority, dueDate])
  
  @@map("tasks")
}

model TaskComment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  // Foreign keys
  taskId   String
  authorId String

  // Relations
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id])

  @@index([taskId])
  @@index([authorId])
  @@index([createdAt])
  @@index([taskId, createdAt])
  @@map("task_comments")
}
